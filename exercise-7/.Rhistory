# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
??flights
nrow(nycflights13)
nrow("nycflights13")
nrow(flights)
ncol(flights)
colnames(flights)
mutate(flights, time gained/lost)
mutate(flights, time gained_or_lost)
mutate(flights, time gained or lost)
View(flights)
mutate(flights, time gained or lost = arr_delay - dep_delay)
mutate(flights, time_diff = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_flights <- arrange(flights, time_diff)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, time_diff) %>%
arrange(time_diff)
mutate(flights, time_diff = arr_delay - dep_delay)
sorted_flights <- arrange(flights, time_diff)
mutated_flights <- mutate(flights, time_diff = arr_delay - dep_delay)
# created. Remember to save this as a variable (or in the same one!)
sorted_flights <- arrange(mutated_flights, time_diff)
View(mutated_flights)
View(mutated_flights)
# created. Remember to save this as a variable (or in the same one!)
sorted_flights <- arrange(mutated_flights, -time_diff)
View(mutated_flights)
View(sorted_flights)
mutate(flights, time_diff) %>%
arrange(time_diff)
mutate(flights, time_diff) %>%
arrange(time_diff)
mutate(flights, time_diff)
mutate(flights, time_diff) %>%
arrange(-time_diff)
mutate(flights, time_diff) %>%
arrange(-time_diff)
mutate(flights, time_diff = arr_delay - dep_delay) %>%
arrange(-time_diff)
hist(flights, time_diff > 0)
hist(time_diff > 0)
hist(mutated_flights$time_diff > 0)
?hist
hist(mutated_flights$time_diff)
sorted_flights <- mutate(flights, time_diff = arr_delay - dep_delay) %>%
arrange(-time_diff)
na.rm = TRUE
mean(mutated_flights$time_diff, na.rm = TRUE)
sorted_flights <- arrange(mutated_flights, -time_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
sorted_flights <- mutate(flights, time_gained = arr_delay - dep_delay) %>%
arrange(-time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(mutated_flights$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(mutated_flights$time_gained, na.rm = TRUE)
mean(mutated_flights$time_gained, na.rm = TRUE)
# Make a histogram of the amount of time gained using the `hist()` function
hist(mutated_flights$time_gained)
mutated_flights <- mutate(flights, time_gained = arr_delay - dep_delay)
sorted_flights <- arrange(mutated_flights, -time_gained)
sorted_flights <- mutate(flights, time_gained = arr_delay - dep_delay) %>%
arrange(-time_gained)
hist(mutated_flights$time_gained)
mean(mutated_flights$time_gained, na.rm = TRUE)
jfk_sea <- flights %>%
filter(origin == "JFK", des == "SEA") %>%
select(origin, des, time_gained)
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutated_flights <- mutate(flights, time_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_flights <- arrange(mutated_flights, -time_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, time_gained = arr_delay - dep_delay) %>%
arrange(-time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(mutated_flights$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(mutated_flights$time_gained, na.rm = TRUE)
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
jfk_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained)
View(jfk_sea)
hist(flights$time_gained)
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained)
mean(to_sea$time_gained, na.rm = TRUE)
jfk_sea <- filter(flights, origin == "JFK", dest == "SEA")
View(jfk_sea)
jfk_sea <- filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(average = mean(air_time), min = min(air_time), max = max(air_time))
View(jfk_sea)
jfk_sea <- filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(average = mean(air_time), min = min(air_time), max = max(air_time))
View(jfk_sea)
jfk_sea <- filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(average = mean(air_time, na.rm = TRUE), min = min(air_time, na.rm = TRUE), max = max(air_time, na.rm = TRUE))
View(jfk_sea)
library(nycflights13)
library(dplyr)
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay))
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay))
View(dep_delay_by_month)
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay), na.rm = TRUE)
View(dep_delay_by_month)
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
View(dep_delay_by_month)
filter(dep_delay_by_month, avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
plot(dep_delay_by_month)
group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE)
group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
select(dest)
group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
select(dest)
filter(dep_delay_by_month, avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
select(dest)
View(dep_delay_by_month)
filter(arr_delay == max(arr_delay)) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(arr_delay == max(arr_delay)) %>%
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-arr_delay)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-avg_delay)
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-avg_delay, na.rm = TRUE)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-avg_delay)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
arrange(-avg_delay)
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay = max(arr_delay)) %>%
select(dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(arr_delay)) %>%
select(dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay))
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay))
View(highest_arr_arr_dest)
highest_arr_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_arr_arr_dest)
max(avg_delay)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay))
max(highest_avg_arr_dest$avg_delay)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
# filter(avg_delay == max(avg_delay))
max(highest_avg_arr_dest$avg_delay)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
# filter(avg_delay == max(avg_delay))
max(highest_avg_arr_dest$avg_delay)
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
# filter(avg_delay == max(avg_delay))
max(highest_avg_arr_dest$avg_delay)
highest_avg_arr_dest <- group_by(flights, dest) %>%
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
View(dep_delay_by_month)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_avg_arr_dest)
max(highest_avg_arr_dest$avg_delay)
max(highest_avg_arr_dest$avg_delay)
highest_avg_arr_dest$avg_delay
View(dep_delay_by_month)
dep_delay_by_month <- group_by(flights, month)
View(dep_delay_by_month)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
# filter(avg_delay == max(avg_delay))
max(highest_avg_arr_dest$avg_delay, na.rm = TRUE)
View(airports)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
#filter(avg_delay == max(avg_delay))
#select(dest)
arrange(-avg_delay)
head(highest_avg_arr_dest)
filter(airports, faa == highest_avg_arr_dest$dest[1])
View(highest_avg_arr_dest)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
View(highest_avg_speed_city)
filter(avg_speed == max(avg_speed))
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE)
flights$dest[flights$avg_speed == max(avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
flights$dest[flights$avg_speed == max(avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_speed_city$dest[highestest_avg_speed_city$avg_speed == max(avg_speed)]
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(avg_speed)]
View(highest_avg_speed_city)
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(avg_speed)]
highest_avg_speed_city$avg_speed
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed)]
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
View(highest_avg_speed_city)
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed)]
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
highest_avg_speed_city$dest[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed)]
highest_avg_speed_city[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed), ]
highest_avg_speed_city[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed), ]
is.data.frame(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
#filter(avg_speed == max(avg_speed))
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
#filter(avg_speed == max(avg_speed))
highest_avg_speed_city[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed), ]
max(highest_avg_speed_city$avg_speed)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_avg_arr_dest)
filter(avg_delay == max(avg_delay), na.rm = TRUE)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay), na.rm = TRUE)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay))
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_avg_arr_dest)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay))
View(highest_avg_arr_dest)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE)
View(highest_avg_arr_dest)
max(highest_avg_arr_dest$avg_delay)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay), na.rm = TRUE)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed))
View(highest_avg_speed_city)
filter(avg_speed == max(avg_speed))
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed))
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed)) %>%
select(dest)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE) %>%
select(dest)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE)
library(dplyr)
read.csv("data/nba_teams_2016.csv")
setwd("~/Desktop/ch10-dplyr/exercise-7")
read.csv("data/nba_teams_2016.csv")
read.csv("data/nba_teams_2016.csv", stringsAsFactors = FALSE)
View
View(nba_teams_2016.csv)
View(read.csv("data/nba_teams_2016.csv", stringsAsFactors = FALSE))
View(nba)
nba <- read.csv("data/nba_teams_2016.csv", stringsAsFactors = FALSE)
View(nba)
mutate(nba, ratio = TOV/STL)
arrange(nba, -ratio)
mutate(nba, ratio = TOV/STL)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
arrange(nba, -ratio)
arrange(nba, -ratio)
nba <- mutate(nba, ratio = TOV/STL)
arrange(nba, -ratio)
arrange(nba, ratio)
mutate(nba, assists_per_game = AST/G)
mutate(nba, assists_per_game = AST/G) %>%
arrange(-assists_per_game)
good_offense <- filter(nba, PTS > 8700, )
View(good_offense)
good_defense <- filter(nba, BLK > 470)
offense_stats <- select(nba, c=(Team, ORB, FG, AST))
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed), na.rm = TRUE)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed))
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE)
View(highest_avg_speed_city)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
View(highest_avg_speed_city)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
highest_avg_speed_city <- mutate(flights, avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
highest_avg_speed_city[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed), ]
View(highest_avg_speed_city[highest_avg_speed_city$avg_speed == max(highest_avg_speed_city$avg_speed), ])
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
select(dest)
highest_avg_arr_dest <- group_by(flights, dest) %>%
summarize(avg_delay = mean(arr_delay), na.rm = TRUE) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest)
View(highest_avg_arr_dest)
highest_avg_speed_city <- mutate(flights, speed = distance / air_time) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed), na.rm = TRUE) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)) %>%
select(dest)
View(highest_avg_speed_city)
offense_stats <- select(nba, Team, ORB, FG, AST)
View(offense_stats)
defense_stats <- select(nba, Team, DRB, STL, BLK)
offense_stats <- select(nba, Team, ORB, FG., AST)
